#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
√ñrnek C√ºmleler √úzerinden Test Senaryolarƒ±
Turkish POS Tagger i√ßin Detaylƒ± Test Analizi
"""

import sys
import os
import time
import json
from typing import List, Tuple, Dict, Any
from datetime import datetime

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from modern_pos_tagger import ModernTurkishPOSTagger
except ImportError:
    print("‚ö†Ô∏è  modern_pos_tagger mod√ºl√º bulunamadƒ±.")
    sys.exit(1)

class TurkishSentenceTestScenarios:
    """T√ºrk√ße c√ºmleler √ºzerinden detaylƒ± test senaryolarƒ±"""
    
    def __init__(self):
        self.models = ["legacy", "fine_tuned", "berturk"]
        self.test_results = {}
        
        # Test senaryolarƒ± ve beklenen sonu√ßlar
        self.test_scenarios = {
            "basit_cumleler": {
                "description": "Basit T√ºrk√ße C√ºmle Yapƒ±larƒ±",
                "sentences": [
                    {
                        "text": "Ali okula gitti .",
                        "focus": "Temel √∂zne-nesne-y√ºklem yapƒ±sƒ±",
                        "expected_pos": ["Noun", "Noun", "Verb", "Punc"]
                    },
                    {
                        "text": "Kitap masada .",
                        "focus": "Basit var c√ºmlesi",
                        "expected_pos": ["Noun", "Noun", "Punc"]
                    },
                    {
                        "text": "Bu √ßok g√ºzel .",
                        "focus": "Zamir + zarf + sƒ±fat yapƒ±sƒ±",
                        "expected_pos": ["Pron", "Adv", "Adj", "Punc"]
                    }
                ]
            },
            
            "karmasik_cumleler": {
                "description": "Karma≈üƒ±k C√ºmle Yapƒ±larƒ±",
                "sentences": [
                    {
                        "text": "√ñƒürenciler dersten sonra k√ºt√ºphaneye giderek ders √ßalƒ±≈ütƒ±lar .",
                        "focus": "Zarf t√ºmleci + birle≈üik fiil yapƒ±sƒ±",
                        "expected_pos": ["Noun", "Noun", "Postp", "Noun", "Verb", "Noun", "Verb", "Punc"]
                    },
                    {
                        "text": "Ge√ßen yƒ±l Ankara'da √ßalƒ±≈üan m√ºhendis ƒ∞stanbul'a ta≈üƒ±ndƒ± .",
                        "focus": "Sƒ±fat t√ºmleci + yer adlarƒ±",
                        "expected_pos": ["Adj", "Noun", "Noun", "Verb", "Noun", "Noun", "Verb", "Punc"]
                    },
                    {
                        "text": "Bug√ºn hava √ßok soƒüuk olduƒüu i√ßin dƒ±≈üarƒ± √ßƒ±kmadƒ±k .",
                        "focus": "Sebep-sonu√ß baƒülacƒ±",
                        "expected_pos": ["Adv", "Noun", "Adv", "Adj", "Verb", "Conj", "Adv", "Verb", "Punc"]
                    }
                ]
            },
            
            "morfological_cases": {
                "description": "T√ºrk√ße Durum Ekleri",
                "sentences": [
                    {
                        "text": "√ñƒüretmen √∂ƒürenciye kitabƒ± verdi .",
                        "focus": "Y√∂nelme hali (-e/-a)",
                        "expected_pos": ["Noun", "Noun_Dat", "Noun_Acc", "Verb", "Punc"]
                    },
                    {
                        "text": "√áocuk oyuncaƒüƒ±nƒ± √ßantasƒ±ndan √ßƒ±kardƒ± .",
                        "focus": "√áƒ±kma hali (-den/-dan)",
                        "expected_pos": ["Noun", "Noun_Acc", "Noun_Abl", "Verb", "Punc"]
                    },
                    {
                        "text": "Ailemin evinde mutlu g√ºnler ge√ßirdik .",
                        "focus": "Tamlayan + bulunma hali",
                        "expected_pos": ["Noun_Gen", "Noun_Loc", "Adj", "Noun", "Verb", "Punc"]
                    }
                ]
            },
            
            "academic_technical": {
                "description": "Akademik ve Teknik Metinler",
                "sentences": [
                    {
                        "text": "Bu ara≈ütƒ±rmada makine √∂ƒürenmesi algoritmalarƒ± kullanƒ±lmƒ±≈ütƒ±r .",
                        "focus": "Akademik terminoloji",
                        "expected_pos": ["Pron", "Noun", "Noun", "Noun", "Noun", "Verb", "Punc"]
                    },
                    {
                        "text": "Doƒüal dil i≈üleme teknikleri metin analizi i√ßin geli≈ütirildi .",
                        "focus": "Teknik terimler",
                        "expected_pos": ["Adj", "Noun", "Noun", "Noun", "Noun", "Noun", "Conj", "Verb", "Punc"]
                    },
                    {
                        "text": "Algoritmanƒ±n performansƒ± %95 doƒüruluk oranƒ±nda √∂l√ß√ºld√º .",
                        "focus": "Sayƒ±sal deƒüerler + akademik ifadeler",
                        "expected_pos": ["Noun", "Noun", "Num", "Noun", "Noun", "Verb", "Punc"]
                    }
                ]
            },
            
            "edge_cases": {
                "description": "√ñzel Durumlar ve Zorlayƒ±cƒ± √ñrnekler",
                "sentences": [
                    {
                        "text": "COVID-19 pandemisi 2020'de ba≈üladƒ± .",
                        "focus": "Kƒ±saltmalar ve sayƒ±lar",
                        "expected_pos": ["Noun", "Noun", "Num", "Verb", "Punc"]
                    },
                    {
                        "text": "E-posta adresini example@test.com olarak g√ºncelledim .",
                        "focus": "ƒ∞nternet terimleri",
                        "expected_pos": ["Noun", "Noun", "Noun", "Conj", "Verb", "Punc"]
                    },
                    {
                        "text": "Ah ! Ne kadar g√ºzel bir manzara !",
                        "focus": "√únlemler ve duygu ifadeleri",
                        "expected_pos": ["Intj", "Punc", "Pron", "Adv", "Adj", "Det", "Noun", "Punc"]
                    }
                ]
            },
            
            "question_forms": {
                "description": "Soru C√ºmleleri",
                "sentences": [
                    {
                        "text": "Bu kitabƒ± kim yazdƒ± ?",
                        "focus": "Kim soru kelimesi",
                        "expected_pos": ["Pron", "Noun", "Pron", "Verb", "Punc"]
                    },
                    {
                        "text": "Nereye gidiyorsun ?",
                        "focus": "Nere- soru k√∂k√º + y√∂nelme hali",
                        "expected_pos": ["Pron", "Verb", "Punc"]
                    },
                    {
                        "text": "Hangi √ºniver·π°itede okuyorsun ?",
                        "focus": "Hangi sƒ±fatƒ± + bulunma hali",
                        "expected_pos": ["Det", "Noun", "Verb", "Punc"]
                    }
                ]
            }
        }
    
    def print_scenario_header(self, scenario_name: str, description: str):
        """Test senaryosu ba≈ülƒ±ƒüƒ±nƒ± yazdƒ±r"""
        print(f"\n{'='*80}")
        print(f"üß™ {scenario_name.upper().replace('_', ' ')}")
        print(f"üìù {description}")
        print(f"{'='*80}")
    
    def analyze_sentence_result(self, sentence_data: Dict, results: Dict[str, List[Tuple[str, str]]]) -> Dict:
        """C√ºmle sonu√ßlarƒ±nƒ± analiz et"""
        analysis = {
            "sentence": sentence_data["text"],
            "focus": sentence_data["focus"],
            "expected": sentence_data.get("expected_pos", []),
            "results": {},
            "accuracy_scores": {},
            "pos_distribution": {}
        }
        
        for model_name, tagged_result in results.items():
            if not tagged_result:
                continue
                
            # POS tag daƒüƒ±lƒ±mƒ±
            pos_tags = [tag for _, tag in tagged_result]
            pos_distribution = {}
            for tag in pos_tags:
                pos_distribution[tag] = pos_distribution.get(tag, 0) + 1
            
            analysis["results"][model_name] = tagged_result
            analysis["pos_distribution"][model_name] = pos_distribution
            
            # Basit doƒüruluk skoru (eƒüer beklenen sonu√ß varsa)
            if sentence_data.get("expected_pos"):
                expected = sentence_data["expected_pos"]
                actual = pos_tags
                
                # Uzunluk kontrol
                min_len = min(len(expected), len(actual))
                matches = sum(1 for i in range(min_len) if expected[i] == actual[i])
                accuracy = (matches / max(len(expected), len(actual))) * 100
                analysis["accuracy_scores"][model_name] = accuracy
        
        return analysis
    
    def run_sentence_scenario(self, scenario_name: str, scenario_data: Dict) -> List[Dict]:
        """Bir senaryo grubunu √ßalƒ±≈ütƒ±r"""
        self.print_scenario_header(scenario_name, scenario_data["description"])
        
        scenario_results = []
        
        for i, sentence_data in enumerate(scenario_data["sentences"], 1):
            print(f"\nüìù Test {i}: {sentence_data['text']}")
            print(f"üéØ Odak: {sentence_data['focus']}")
            print("-" * 60)
            
            # Her model i√ßin test et
            model_results = {}
            for model_name in self.models:
                try:
                    tagger = ModernTurkishPOSTagger(model_type=model_name)
                    start_time = time.time()
                    result = tagger.tag(sentence_data["text"])
                    processing_time = time.time() - start_time
                    
                    model_results[model_name] = result
                    
                    # Sonucu formatla ve yazdƒ±r
                    formatted_result = " ".join([f"{word}/{tag}" for word, tag in result])
                    print(f"{model_name.upper():>12}: {formatted_result}")
                    print(f"{'':>12}  ‚è±Ô∏è  {processing_time:.4f}s")
                    
                except Exception as e:
                    print(f"{model_name.upper():>12}: ‚ùå Hata - {str(e)[:50]}...")
                    model_results[model_name] = []
            
            # Analiz yap
            analysis = self.analyze_sentence_result(sentence_data, model_results)
            scenario_results.append(analysis)
            
            # Doƒüruluk skorlarƒ±nƒ± g√∂ster (eƒüer varsa)
            if analysis["accuracy_scores"]:
                print("\nüìä Doƒüruluk Skorlarƒ±:")
                for model, score in analysis["accuracy_scores"].items():
                    print(f"{'':>12}  {model.upper()}: {score:.1f}%")
        
        return scenario_results
    
    def generate_comparative_analysis(self, all_results: Dict[str, List[Dict]]) -> Dict:
        """Kar≈üƒ±la≈ütƒ±rmalƒ± analiz olu≈ütur"""
        print(f"\n{'='*80}")
        print("üìä KAR≈ûILA≈ûTIRMALI ANALƒ∞Z")
        print(f"{'='*80}")
        
        comparative_analysis = {
            "model_performance": {model: {"total_tests": 0, "total_accuracy": 0, "avg_accuracy": 0} 
                                 for model in self.models},
            "pos_tag_usage": {model: {} for model in self.models},
            "scenario_performance": {},
            "best_model_per_scenario": {}
        }
        
        # Model performansƒ±nƒ± hesapla
        for scenario_name, results in all_results.items():
            scenario_accuracy = {model: [] for model in self.models}
            
            for result in results:
                for model in self.models:
                    if model in result["accuracy_scores"]:
                        accuracy = result["accuracy_scores"][model]
                        scenario_accuracy[model].append(accuracy)
                        comparative_analysis["model_performance"][model]["total_tests"] += 1
                        comparative_analysis["model_performance"][model]["total_accuracy"] += accuracy
                
                # POS tag kullanƒ±mƒ±nƒ± topla
                for model in self.models:
                    if model in result["pos_distribution"]:
                        for tag, count in result["pos_distribution"][model].items():
                            if tag not in comparative_analysis["pos_tag_usage"][model]:
                                comparative_analysis["pos_tag_usage"][model][tag] = 0
                            comparative_analysis["pos_tag_usage"][model][tag] += count
            
            # Senaryo bazƒ±nda en iyi modeli bul
            avg_scenario_accuracy = {}
            for model in self.models:
                if scenario_accuracy[model]:
                    avg_accuracy = sum(scenario_accuracy[model]) / len(scenario_accuracy[model])
                    avg_scenario_accuracy[model] = avg_accuracy
            
            if avg_scenario_accuracy:
                best_model = max(avg_scenario_accuracy, key=avg_scenario_accuracy.get)
                comparative_analysis["best_model_per_scenario"][scenario_name] = {
                    "model": best_model,
                    "accuracy": avg_scenario_accuracy[best_model]
                }
                comparative_analysis["scenario_performance"][scenario_name] = avg_scenario_accuracy
        
        # Ortalama doƒüruluk hesapla
        for model in self.models:
            perf = comparative_analysis["model_performance"][model]
            if perf["total_tests"] > 0:
                perf["avg_accuracy"] = perf["total_accuracy"] / perf["total_tests"]
        
        return comparative_analysis
    
    def print_comparative_results(self, analysis: Dict):
        """Kar≈üƒ±la≈ütƒ±rmalƒ± sonu√ßlarƒ± yazdƒ±r"""
        
        # 1. Genel Model Performansƒ±
        print("\nüèÜ GENEL MODEL PERFORMANSI")
        print("-" * 50)
        print(f"{'Model':<15} {'Test Sayƒ±sƒ±':<12} {'Ort. Doƒüruluk':<15} {'Deƒüerlendirme'}")
        print("-" * 60)
        
        for model, perf in analysis["model_performance"].items():
            if perf["total_tests"] > 0:
                grade = "ü•á M√ºkemmel" if perf["avg_accuracy"] >= 90 else \
                       "ü•à ƒ∞yi" if perf["avg_accuracy"] >= 80 else \
                       "ü•â Orta" if perf["avg_accuracy"] >= 70 else "üìà Geli≈üim Gerekli"
                
                print(f"{model.title():<15} {perf['total_tests']:<12} "
                      f"{perf['avg_accuracy']:.1f}%{'':<10} {grade}")
        
        # 2. Senaryo Bazƒ±nda En ƒ∞yi Modeller
        print("\nüéØ SENARYO BAZINDA EN ƒ∞Yƒ∞ MODELLER")
        print("-" * 50)
        
        for scenario, best in analysis["best_model_per_scenario"].items():
            scenario_display = scenario.replace("_", " ").title()
            print(f"{scenario_display:<25}: {best['model'].title()} ({best['accuracy']:.1f}%)")
        
        # 3. POS Tag Kullanƒ±m ƒ∞statistikleri
        print("\nüè∑Ô∏è  EN √áOKKULLANILAN POS TAGLERƒ∞")
        print("-" * 50)
        
        for model in self.models:
            if analysis["pos_tag_usage"][model]:
                print(f"\n{model.title()} Modeli:")
                # En √ßok kullanƒ±lan 5 tag
                sorted_tags = sorted(analysis["pos_tag_usage"][model].items(), 
                                   key=lambda x: x[1], reverse=True)[:5]
                for tag, count in sorted_tags:
                    print(f"  {tag:<12}: {count} kez")
    
    def save_detailed_results(self, all_results: Dict, analysis: Dict, filename: str = "ornek_cumle_test_sonuclari.json"):
        """Detaylƒ± sonu√ßlarƒ± kaydet"""
        output_data = {
            "test_date": datetime.now().isoformat(),
            "test_scenarios": all_results,
            "comparative_analysis": analysis,
            "summary": {
                "total_scenarios": len(all_results),
                "total_sentences": sum(len(results) for results in all_results.values()),
                "models_tested": self.models
            }
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüíæ Detaylƒ± sonu√ßlar '{filename}' dosyasƒ±na kaydedildi.")
        except Exception as e:
            print(f"‚ö†Ô∏è  Sonu√ßlar kaydedilemedi: {e}")
    
    def run_all_scenarios(self):
        """T√ºm test senaryolarƒ±nƒ± √ßalƒ±≈ütƒ±r"""
        print("üáπüá∑" + "="*78 + "üáπüá∑")
        print("     T√úRK√áE POS TAGGER - √ñRNEK C√úMLE TEST SENARYOLARI")
        print("üáπüá∑" + "="*78 + "üáπüá∑")
        
        all_results = {}
        
        # Her senaryoyu √ßalƒ±≈ütƒ±r
        for scenario_name, scenario_data in self.test_scenarios.items():
            scenario_results = self.run_sentence_scenario(scenario_name, scenario_data)
            all_results[scenario_name] = scenario_results
        
        # Kar≈üƒ±la≈ütƒ±rmalƒ± analiz
        comparative_analysis = self.generate_comparative_analysis(all_results)
        self.print_comparative_results(comparative_analysis)
        
        # Sonu√ßlarƒ± kaydet
        self.save_detailed_results(all_results, comparative_analysis)
        
        print(f"\nüéâ T√úM TEST SENARYOLARI TAMAMLANDI!")
        print(f"{'='*80}")
        print(f"üìä {len(self.test_scenarios)} senaryo grubu test edildi")
        print(f"üìù {sum(len(scenario['sentences']) for scenario in self.test_scenarios.values())} √∂rnek c√ºmle analiz edildi")
        print(f"ü§ñ {len(self.models)} farklƒ± model kar≈üƒ±la≈ütƒ±rƒ±ldƒ±")
        
        return all_results, comparative_analysis

def main():
    """Ana test fonksiyonu"""
    test_runner = TurkishSentenceTestScenarios()
    results, analysis = test_runner.run_all_scenarios()
    
    print("\nüí° RAPOR ƒ∞√áƒ∞N √ñNERƒ∞LER:")
    print("-" * 30)
    print("1. 'ornek_cumle_test_sonuclari.json' dosyasƒ±nƒ± raporda veri kaynaƒüƒ± olarak kullanƒ±n")
    print("2. Senaryo bazƒ±nda en iyi model performanslarƒ±nƒ± tablolar halinde sunun")
    print("3. POS tag doƒüruluk oranlarƒ±nƒ± grafiklerle g√∂sterin")
    print("4. Morfological case'lerin doƒüru tanƒ±nma oranlarƒ±nƒ± vurgulayƒ±n")
    print("5. Edge case'lerdeki ba≈üarƒ± oranlarƒ±nƒ± √∂ne √ßƒ±karƒ±n")
    
    return results, analysis

if __name__ == "__main__":
    main() 